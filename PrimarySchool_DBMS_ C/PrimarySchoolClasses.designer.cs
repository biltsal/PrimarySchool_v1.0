#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PrimarySchool_DBMS__C
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ASSIGNMENT_PRIMARY_SCHOOL")]
	public partial class PrimarySchoolClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertASSIGNMENT(ASSIGNMENT instance);
    partial void UpdateASSIGNMENT(ASSIGNMENT instance);
    partial void DeleteASSIGNMENT(ASSIGNMENT instance);
    partial void InsertUsersDetail(UsersDetail instance);
    partial void UpdateUsersDetail(UsersDetail instance);
    partial void DeleteUsersDetail(UsersDetail instance);
    partial void InsertASSIGNMENT_STUDENT(ASSIGNMENT_STUDENT instance);
    partial void UpdateASSIGNMENT_STUDENT(ASSIGNMENT_STUDENT instance);
    partial void DeleteASSIGNMENT_STUDENT(ASSIGNMENT_STUDENT instance);
    partial void InsertCOURSE(COURSE instance);
    partial void UpdateCOURSE(COURSE instance);
    partial void DeleteCOURSE(COURSE instance);
    partial void InsertDAY(DAY instance);
    partial void UpdateDAY(DAY instance);
    partial void DeleteDAY(DAY instance);
    partial void InsertDAY_COURSE(DAY_COURSE instance);
    partial void UpdateDAY_COURSE(DAY_COURSE instance);
    partial void DeleteDAY_COURSE(DAY_COURSE instance);
    partial void InsertSTUDENT(STUDENT instance);
    partial void UpdateSTUDENT(STUDENT instance);
    partial void DeleteSTUDENT(STUDENT instance);
    partial void InsertSTUDENT_COURSE(STUDENT_COURSE instance);
    partial void UpdateSTUDENT_COURSE(STUDENT_COURSE instance);
    partial void DeleteSTUDENT_COURSE(STUDENT_COURSE instance);
    partial void InsertTRAINER(TRAINER instance);
    partial void UpdateTRAINER(TRAINER instance);
    partial void DeleteTRAINER(TRAINER instance);
    #endregion
		
		public PrimarySchoolClassesDataContext() : 
				base(global::PrimarySchool_DBMS__C.Properties.Settings.Default.ASSIGNMENT_PRIMARY_SCHOOLConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PrimarySchoolClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrimarySchoolClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrimarySchoolClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrimarySchoolClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ASSIGNMENT> ASSIGNMENTs
		{
			get
			{
				return this.GetTable<ASSIGNMENT>();
			}
		}
		
		public System.Data.Linq.Table<UsersDetail> UsersDetails
		{
			get
			{
				return this.GetTable<UsersDetail>();
			}
		}
		
		public System.Data.Linq.Table<ASSIGNMENT_STUDENT> ASSIGNMENT_STUDENTs
		{
			get
			{
				return this.GetTable<ASSIGNMENT_STUDENT>();
			}
		}
		
		public System.Data.Linq.Table<COURSE> COURSEs
		{
			get
			{
				return this.GetTable<COURSE>();
			}
		}
		
		public System.Data.Linq.Table<DAY> DAYs
		{
			get
			{
				return this.GetTable<DAY>();
			}
		}
		
		public System.Data.Linq.Table<DAY_COURSE> DAY_COURSEs
		{
			get
			{
				return this.GetTable<DAY_COURSE>();
			}
		}
		
		public System.Data.Linq.Table<STUDENT> STUDENTs
		{
			get
			{
				return this.GetTable<STUDENT>();
			}
		}
		
		public System.Data.Linq.Table<STUDENT_COURSE> STUDENT_COURSEs
		{
			get
			{
				return this.GetTable<STUDENT_COURSE>();
			}
		}
		
		public System.Data.Linq.Table<TRAINER> TRAINERs
		{
			get
			{
				return this.GetTable<TRAINER>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ASSIGNMENT")]
	public partial class ASSIGNMENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssignmentID;
		
		private string _Title;
		
		private string _Description;
		
		private int _CourseID;
		
		private System.DateTime _SubmissionDate;
		
		private EntitySet<ASSIGNMENT_STUDENT> _ASSIGNMENT_STUDENTs;
		
		private EntityRef<COURSE> _COURSE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssignmentIDChanging(int value);
    partial void OnAssignmentIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnSubmissionDateChanging(System.DateTime value);
    partial void OnSubmissionDateChanged();
    #endregion
		
		public ASSIGNMENT()
		{
			this._ASSIGNMENT_STUDENTs = new EntitySet<ASSIGNMENT_STUDENT>(new Action<ASSIGNMENT_STUDENT>(this.attach_ASSIGNMENT_STUDENTs), new Action<ASSIGNMENT_STUDENT>(this.detach_ASSIGNMENT_STUDENTs));
			this._COURSE = default(EntityRef<COURSE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AssignmentID
		{
			get
			{
				return this._AssignmentID;
			}
			set
			{
				if ((this._AssignmentID != value))
				{
					this.OnAssignmentIDChanging(value);
					this.SendPropertyChanging();
					this._AssignmentID = value;
					this.SendPropertyChanged("AssignmentID");
					this.OnAssignmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL")]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._COURSE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionDate", DbType="DateTime NOT NULL")]
		public System.DateTime SubmissionDate
		{
			get
			{
				return this._SubmissionDate;
			}
			set
			{
				if ((this._SubmissionDate != value))
				{
					this.OnSubmissionDateChanging(value);
					this.SendPropertyChanging();
					this._SubmissionDate = value;
					this.SendPropertyChanged("SubmissionDate");
					this.OnSubmissionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ASSIGNMENT_ASSIGNMENT_STUDENT", Storage="_ASSIGNMENT_STUDENTs", ThisKey="AssignmentID", OtherKey="AssignmentID")]
		public EntitySet<ASSIGNMENT_STUDENT> ASSIGNMENT_STUDENTs
		{
			get
			{
				return this._ASSIGNMENT_STUDENTs;
			}
			set
			{
				this._ASSIGNMENT_STUDENTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COURSE_ASSIGNMENT", Storage="_COURSE", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true)]
		public COURSE COURSE
		{
			get
			{
				return this._COURSE.Entity;
			}
			set
			{
				COURSE previousValue = this._COURSE.Entity;
				if (((previousValue != value) 
							|| (this._COURSE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._COURSE.Entity = null;
						previousValue.ASSIGNMENTs.Remove(this);
					}
					this._COURSE.Entity = value;
					if ((value != null))
					{
						value.ASSIGNMENTs.Add(this);
						this._CourseID = value.CourseID;
					}
					else
					{
						this._CourseID = default(int);
					}
					this.SendPropertyChanged("COURSE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ASSIGNMENT_STUDENTs(ASSIGNMENT_STUDENT entity)
		{
			this.SendPropertyChanging();
			entity.ASSIGNMENT = this;
		}
		
		private void detach_ASSIGNMENT_STUDENTs(ASSIGNMENT_STUDENT entity)
		{
			this.SendPropertyChanging();
			entity.ASSIGNMENT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersDetails")]
	public partial class UsersDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _Password;
		
		private string _Role;
		
		private EntitySet<STUDENT> _STUDENTs;
		
		private EntitySet<TRAINER> _TRAINERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    #endregion
		
		public UsersDetail()
		{
			this._STUDENTs = new EntitySet<STUDENT>(new Action<STUDENT>(this.attach_STUDENTs), new Action<STUDENT>(this.detach_STUDENTs));
			this._TRAINERs = new EntitySet<TRAINER>(new Action<TRAINER>(this.attach_TRAINERs), new Action<TRAINER>(this.detach_TRAINERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(18) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersDetail_STUDENT", Storage="_STUDENTs", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<STUDENT> STUDENTs
		{
			get
			{
				return this._STUDENTs;
			}
			set
			{
				this._STUDENTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersDetail_TRAINER", Storage="_TRAINERs", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<TRAINER> TRAINERs
		{
			get
			{
				return this._TRAINERs;
			}
			set
			{
				this._TRAINERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_STUDENTs(STUDENT entity)
		{
			this.SendPropertyChanging();
			entity.UsersDetail = this;
		}
		
		private void detach_STUDENTs(STUDENT entity)
		{
			this.SendPropertyChanging();
			entity.UsersDetail = null;
		}
		
		private void attach_TRAINERs(TRAINER entity)
		{
			this.SendPropertyChanging();
			entity.UsersDetail = this;
		}
		
		private void detach_TRAINERs(TRAINER entity)
		{
			this.SendPropertyChanging();
			entity.UsersDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ASSIGNMENT_STUDENT")]
	public partial class ASSIGNMENT_STUDENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssignmentID;
		
		private int _StudentID;
		
		private System.Nullable<decimal> _OralMark;
		
		private System.Nullable<decimal> _TotalMark;
		
		private System.Nullable<bool> _IsSubmitted;
		
		private System.Nullable<System.DateTime> _DateSubmitted;
		
		private EntityRef<ASSIGNMENT> _ASSIGNMENT;
		
		private EntityRef<STUDENT> _STUDENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssignmentIDChanging(int value);
    partial void OnAssignmentIDChanged();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnOralMarkChanging(System.Nullable<decimal> value);
    partial void OnOralMarkChanged();
    partial void OnTotalMarkChanging(System.Nullable<decimal> value);
    partial void OnTotalMarkChanged();
    partial void OnIsSubmittedChanging(System.Nullable<bool> value);
    partial void OnIsSubmittedChanged();
    partial void OnDateSubmittedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateSubmittedChanged();
    #endregion
		
		public ASSIGNMENT_STUDENT()
		{
			this._ASSIGNMENT = default(EntityRef<ASSIGNMENT>);
			this._STUDENT = default(EntityRef<STUDENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AssignmentID
		{
			get
			{
				return this._AssignmentID;
			}
			set
			{
				if ((this._AssignmentID != value))
				{
					if (this._ASSIGNMENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignmentIDChanging(value);
					this.SendPropertyChanging();
					this._AssignmentID = value;
					this.SendPropertyChanged("AssignmentID");
					this.OnAssignmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._STUDENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OralMark", DbType="Decimal(3,2)")]
		public System.Nullable<decimal> OralMark
		{
			get
			{
				return this._OralMark;
			}
			set
			{
				if ((this._OralMark != value))
				{
					this.OnOralMarkChanging(value);
					this.SendPropertyChanging();
					this._OralMark = value;
					this.SendPropertyChanged("OralMark");
					this.OnOralMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalMark", DbType="Decimal(3,2)")]
		public System.Nullable<decimal> TotalMark
		{
			get
			{
				return this._TotalMark;
			}
			set
			{
				if ((this._TotalMark != value))
				{
					this.OnTotalMarkChanging(value);
					this.SendPropertyChanging();
					this._TotalMark = value;
					this.SendPropertyChanged("TotalMark");
					this.OnTotalMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSubmitted", DbType="Bit")]
		public System.Nullable<bool> IsSubmitted
		{
			get
			{
				return this._IsSubmitted;
			}
			set
			{
				if ((this._IsSubmitted != value))
				{
					this.OnIsSubmittedChanging(value);
					this.SendPropertyChanging();
					this._IsSubmitted = value;
					this.SendPropertyChanged("IsSubmitted");
					this.OnIsSubmittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateSubmitted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSubmitted
		{
			get
			{
				return this._DateSubmitted;
			}
			set
			{
				if ((this._DateSubmitted != value))
				{
					this.OnDateSubmittedChanging(value);
					this.SendPropertyChanging();
					this._DateSubmitted = value;
					this.SendPropertyChanged("DateSubmitted");
					this.OnDateSubmittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ASSIGNMENT_ASSIGNMENT_STUDENT", Storage="_ASSIGNMENT", ThisKey="AssignmentID", OtherKey="AssignmentID", IsForeignKey=true)]
		public ASSIGNMENT ASSIGNMENT
		{
			get
			{
				return this._ASSIGNMENT.Entity;
			}
			set
			{
				ASSIGNMENT previousValue = this._ASSIGNMENT.Entity;
				if (((previousValue != value) 
							|| (this._ASSIGNMENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ASSIGNMENT.Entity = null;
						previousValue.ASSIGNMENT_STUDENTs.Remove(this);
					}
					this._ASSIGNMENT.Entity = value;
					if ((value != null))
					{
						value.ASSIGNMENT_STUDENTs.Add(this);
						this._AssignmentID = value.AssignmentID;
					}
					else
					{
						this._AssignmentID = default(int);
					}
					this.SendPropertyChanged("ASSIGNMENT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STUDENT_ASSIGNMENT_STUDENT", Storage="_STUDENT", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public STUDENT STUDENT
		{
			get
			{
				return this._STUDENT.Entity;
			}
			set
			{
				STUDENT previousValue = this._STUDENT.Entity;
				if (((previousValue != value) 
							|| (this._STUDENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STUDENT.Entity = null;
						previousValue.ASSIGNMENT_STUDENTs.Remove(this);
					}
					this._STUDENT.Entity = value;
					if ((value != null))
					{
						value.ASSIGNMENT_STUDENTs.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("STUDENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.COURSE")]
	public partial class COURSE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseID;
		
		private string _Title;
		
		private string _MainSubject;
		
		private bool _IsFullTime;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<int> _TrainerID;
		
		private EntitySet<ASSIGNMENT> _ASSIGNMENTs;
		
		private EntitySet<DAY_COURSE> _DAY_COURSEs;
		
		private EntitySet<STUDENT_COURSE> _STUDENT_COURSEs;
		
		private EntityRef<TRAINER> _TRAINER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnMainSubjectChanging(string value);
    partial void OnMainSubjectChanged();
    partial void OnIsFullTimeChanging(bool value);
    partial void OnIsFullTimeChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnTrainerIDChanging(System.Nullable<int> value);
    partial void OnTrainerIDChanged();
    #endregion
		
		public COURSE()
		{
			this._ASSIGNMENTs = new EntitySet<ASSIGNMENT>(new Action<ASSIGNMENT>(this.attach_ASSIGNMENTs), new Action<ASSIGNMENT>(this.detach_ASSIGNMENTs));
			this._DAY_COURSEs = new EntitySet<DAY_COURSE>(new Action<DAY_COURSE>(this.attach_DAY_COURSEs), new Action<DAY_COURSE>(this.detach_DAY_COURSEs));
			this._STUDENT_COURSEs = new EntitySet<STUDENT_COURSE>(new Action<STUDENT_COURSE>(this.attach_STUDENT_COURSEs), new Action<STUDENT_COURSE>(this.detach_STUDENT_COURSEs));
			this._TRAINER = default(EntityRef<TRAINER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainSubject", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string MainSubject
		{
			get
			{
				return this._MainSubject;
			}
			set
			{
				if ((this._MainSubject != value))
				{
					this.OnMainSubjectChanging(value);
					this.SendPropertyChanging();
					this._MainSubject = value;
					this.SendPropertyChanged("MainSubject");
					this.OnMainSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFullTime", DbType="Bit NOT NULL")]
		public bool IsFullTime
		{
			get
			{
				return this._IsFullTime;
			}
			set
			{
				if ((this._IsFullTime != value))
				{
					this.OnIsFullTimeChanging(value);
					this.SendPropertyChanging();
					this._IsFullTime = value;
					this.SendPropertyChanged("IsFullTime");
					this.OnIsFullTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainerID", DbType="Int")]
		public System.Nullable<int> TrainerID
		{
			get
			{
				return this._TrainerID;
			}
			set
			{
				if ((this._TrainerID != value))
				{
					if (this._TRAINER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainerIDChanging(value);
					this.SendPropertyChanging();
					this._TrainerID = value;
					this.SendPropertyChanged("TrainerID");
					this.OnTrainerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COURSE_ASSIGNMENT", Storage="_ASSIGNMENTs", ThisKey="CourseID", OtherKey="CourseID")]
		public EntitySet<ASSIGNMENT> ASSIGNMENTs
		{
			get
			{
				return this._ASSIGNMENTs;
			}
			set
			{
				this._ASSIGNMENTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COURSE_DAY_COURSE", Storage="_DAY_COURSEs", ThisKey="CourseID", OtherKey="CourseID")]
		public EntitySet<DAY_COURSE> DAY_COURSEs
		{
			get
			{
				return this._DAY_COURSEs;
			}
			set
			{
				this._DAY_COURSEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COURSE_STUDENT_COURSE", Storage="_STUDENT_COURSEs", ThisKey="CourseID", OtherKey="CourseID")]
		public EntitySet<STUDENT_COURSE> STUDENT_COURSEs
		{
			get
			{
				return this._STUDENT_COURSEs;
			}
			set
			{
				this._STUDENT_COURSEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TRAINER_COURSE", Storage="_TRAINER", ThisKey="TrainerID", OtherKey="TrainerID", IsForeignKey=true)]
		public TRAINER TRAINER
		{
			get
			{
				return this._TRAINER.Entity;
			}
			set
			{
				TRAINER previousValue = this._TRAINER.Entity;
				if (((previousValue != value) 
							|| (this._TRAINER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TRAINER.Entity = null;
						previousValue.COURSEs.Remove(this);
					}
					this._TRAINER.Entity = value;
					if ((value != null))
					{
						value.COURSEs.Add(this);
						this._TrainerID = value.TrainerID;
					}
					else
					{
						this._TrainerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TRAINER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ASSIGNMENTs(ASSIGNMENT entity)
		{
			this.SendPropertyChanging();
			entity.COURSE = this;
		}
		
		private void detach_ASSIGNMENTs(ASSIGNMENT entity)
		{
			this.SendPropertyChanging();
			entity.COURSE = null;
		}
		
		private void attach_DAY_COURSEs(DAY_COURSE entity)
		{
			this.SendPropertyChanging();
			entity.COURSE = this;
		}
		
		private void detach_DAY_COURSEs(DAY_COURSE entity)
		{
			this.SendPropertyChanging();
			entity.COURSE = null;
		}
		
		private void attach_STUDENT_COURSEs(STUDENT_COURSE entity)
		{
			this.SendPropertyChanging();
			entity.COURSE = this;
		}
		
		private void detach_STUDENT_COURSEs(STUDENT_COURSE entity)
		{
			this.SendPropertyChanging();
			entity.COURSE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DAY")]
	public partial class DAY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DayID;
		
		private string _WeekDay;
		
		private EntitySet<DAY_COURSE> _DAY_COURSEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDayIDChanging(int value);
    partial void OnDayIDChanged();
    partial void OnWeekDayChanging(string value);
    partial void OnWeekDayChanged();
    #endregion
		
		public DAY()
		{
			this._DAY_COURSEs = new EntitySet<DAY_COURSE>(new Action<DAY_COURSE>(this.attach_DAY_COURSEs), new Action<DAY_COURSE>(this.detach_DAY_COURSEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DayID
		{
			get
			{
				return this._DayID;
			}
			set
			{
				if ((this._DayID != value))
				{
					this.OnDayIDChanging(value);
					this.SendPropertyChanging();
					this._DayID = value;
					this.SendPropertyChanged("DayID");
					this.OnDayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekDay", DbType="NVarChar(50)")]
		public string WeekDay
		{
			get
			{
				return this._WeekDay;
			}
			set
			{
				if ((this._WeekDay != value))
				{
					this.OnWeekDayChanging(value);
					this.SendPropertyChanging();
					this._WeekDay = value;
					this.SendPropertyChanged("WeekDay");
					this.OnWeekDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DAY_DAY_COURSE", Storage="_DAY_COURSEs", ThisKey="DayID", OtherKey="DayID")]
		public EntitySet<DAY_COURSE> DAY_COURSEs
		{
			get
			{
				return this._DAY_COURSEs;
			}
			set
			{
				this._DAY_COURSEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DAY_COURSEs(DAY_COURSE entity)
		{
			this.SendPropertyChanging();
			entity.DAY = this;
		}
		
		private void detach_DAY_COURSEs(DAY_COURSE entity)
		{
			this.SendPropertyChanging();
			entity.DAY = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DAY_COURSE")]
	public partial class DAY_COURSE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DayID;
		
		private int _CourseID;
		
		private EntityRef<COURSE> _COURSE;
		
		private EntityRef<DAY> _DAY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDayIDChanging(int value);
    partial void OnDayIDChanged();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    #endregion
		
		public DAY_COURSE()
		{
			this._COURSE = default(EntityRef<COURSE>);
			this._DAY = default(EntityRef<DAY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DayID
		{
			get
			{
				return this._DayID;
			}
			set
			{
				if ((this._DayID != value))
				{
					if (this._DAY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDayIDChanging(value);
					this.SendPropertyChanging();
					this._DayID = value;
					this.SendPropertyChanged("DayID");
					this.OnDayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._COURSE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COURSE_DAY_COURSE", Storage="_COURSE", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true)]
		public COURSE COURSE
		{
			get
			{
				return this._COURSE.Entity;
			}
			set
			{
				COURSE previousValue = this._COURSE.Entity;
				if (((previousValue != value) 
							|| (this._COURSE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._COURSE.Entity = null;
						previousValue.DAY_COURSEs.Remove(this);
					}
					this._COURSE.Entity = value;
					if ((value != null))
					{
						value.DAY_COURSEs.Add(this);
						this._CourseID = value.CourseID;
					}
					else
					{
						this._CourseID = default(int);
					}
					this.SendPropertyChanged("COURSE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DAY_DAY_COURSE", Storage="_DAY", ThisKey="DayID", OtherKey="DayID", IsForeignKey=true)]
		public DAY DAY
		{
			get
			{
				return this._DAY.Entity;
			}
			set
			{
				DAY previousValue = this._DAY.Entity;
				if (((previousValue != value) 
							|| (this._DAY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DAY.Entity = null;
						previousValue.DAY_COURSEs.Remove(this);
					}
					this._DAY.Entity = value;
					if ((value != null))
					{
						value.DAY_COURSEs.Add(this);
						this._DayID = value.DayID;
					}
					else
					{
						this._DayID = default(int);
					}
					this.SendPropertyChanged("DAY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STUDENT")]
	public partial class STUDENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.DateTime _DateOfBirth;
		
		private int _UserID;
		
		private EntitySet<ASSIGNMENT_STUDENT> _ASSIGNMENT_STUDENTs;
		
		private EntitySet<STUDENT_COURSE> _STUDENT_COURSEs;
		
		private EntityRef<UsersDetail> _UsersDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public STUDENT()
		{
			this._ASSIGNMENT_STUDENTs = new EntitySet<ASSIGNMENT_STUDENT>(new Action<ASSIGNMENT_STUDENT>(this.attach_ASSIGNMENT_STUDENTs), new Action<ASSIGNMENT_STUDENT>(this.detach_ASSIGNMENT_STUDENTs));
			this._STUDENT_COURSEs = new EntitySet<STUDENT_COURSE>(new Action<STUDENT_COURSE>(this.attach_STUDENT_COURSEs), new Action<STUDENT_COURSE>(this.detach_STUDENT_COURSEs));
			this._UsersDetail = default(EntityRef<UsersDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UsersDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STUDENT_ASSIGNMENT_STUDENT", Storage="_ASSIGNMENT_STUDENTs", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<ASSIGNMENT_STUDENT> ASSIGNMENT_STUDENTs
		{
			get
			{
				return this._ASSIGNMENT_STUDENTs;
			}
			set
			{
				this._ASSIGNMENT_STUDENTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STUDENT_STUDENT_COURSE", Storage="_STUDENT_COURSEs", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<STUDENT_COURSE> STUDENT_COURSEs
		{
			get
			{
				return this._STUDENT_COURSEs;
			}
			set
			{
				this._STUDENT_COURSEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersDetail_STUDENT", Storage="_UsersDetail", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public UsersDetail UsersDetail
		{
			get
			{
				return this._UsersDetail.Entity;
			}
			set
			{
				UsersDetail previousValue = this._UsersDetail.Entity;
				if (((previousValue != value) 
							|| (this._UsersDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersDetail.Entity = null;
						previousValue.STUDENTs.Remove(this);
					}
					this._UsersDetail.Entity = value;
					if ((value != null))
					{
						value.STUDENTs.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UsersDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ASSIGNMENT_STUDENTs(ASSIGNMENT_STUDENT entity)
		{
			this.SendPropertyChanging();
			entity.STUDENT = this;
		}
		
		private void detach_ASSIGNMENT_STUDENTs(ASSIGNMENT_STUDENT entity)
		{
			this.SendPropertyChanging();
			entity.STUDENT = null;
		}
		
		private void attach_STUDENT_COURSEs(STUDENT_COURSE entity)
		{
			this.SendPropertyChanging();
			entity.STUDENT = this;
		}
		
		private void detach_STUDENT_COURSEs(STUDENT_COURSE entity)
		{
			this.SendPropertyChanging();
			entity.STUDENT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STUDENT_COURSE")]
	public partial class STUDENT_COURSE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentID;
		
		private int _CourseID;
		
		private System.Nullable<decimal> _Grade;
		
		private EntityRef<COURSE> _COURSE;
		
		private EntityRef<STUDENT> _STUDENT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnGradeChanging(System.Nullable<decimal> value);
    partial void OnGradeChanged();
    #endregion
		
		public STUDENT_COURSE()
		{
			this._COURSE = default(EntityRef<COURSE>);
			this._STUDENT = default(EntityRef<STUDENT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._STUDENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._COURSE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="Decimal(3,2)")]
		public System.Nullable<decimal> Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COURSE_STUDENT_COURSE", Storage="_COURSE", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true)]
		public COURSE COURSE
		{
			get
			{
				return this._COURSE.Entity;
			}
			set
			{
				COURSE previousValue = this._COURSE.Entity;
				if (((previousValue != value) 
							|| (this._COURSE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._COURSE.Entity = null;
						previousValue.STUDENT_COURSEs.Remove(this);
					}
					this._COURSE.Entity = value;
					if ((value != null))
					{
						value.STUDENT_COURSEs.Add(this);
						this._CourseID = value.CourseID;
					}
					else
					{
						this._CourseID = default(int);
					}
					this.SendPropertyChanged("COURSE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STUDENT_STUDENT_COURSE", Storage="_STUDENT", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public STUDENT STUDENT
		{
			get
			{
				return this._STUDENT.Entity;
			}
			set
			{
				STUDENT previousValue = this._STUDENT.Entity;
				if (((previousValue != value) 
							|| (this._STUDENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STUDENT.Entity = null;
						previousValue.STUDENT_COURSEs.Remove(this);
					}
					this._STUDENT.Entity = value;
					if ((value != null))
					{
						value.STUDENT_COURSEs.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("STUDENT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TRAINER")]
	public partial class TRAINER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrainerID;
		
		private int _UserID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Subject;
		
		private EntitySet<COURSE> _COURSEs;
		
		private EntityRef<UsersDetail> _UsersDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainerIDChanging(int value);
    partial void OnTrainerIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    #endregion
		
		public TRAINER()
		{
			this._COURSEs = new EntitySet<COURSE>(new Action<COURSE>(this.attach_COURSEs), new Action<COURSE>(this.detach_COURSEs));
			this._UsersDetail = default(EntityRef<UsersDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrainerID
		{
			get
			{
				return this._TrainerID;
			}
			set
			{
				if ((this._TrainerID != value))
				{
					this.OnTrainerIDChanging(value);
					this.SendPropertyChanging();
					this._TrainerID = value;
					this.SendPropertyChanged("TrainerID");
					this.OnTrainerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UsersDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(50)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TRAINER_COURSE", Storage="_COURSEs", ThisKey="TrainerID", OtherKey="TrainerID")]
		public EntitySet<COURSE> COURSEs
		{
			get
			{
				return this._COURSEs;
			}
			set
			{
				this._COURSEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersDetail_TRAINER", Storage="_UsersDetail", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public UsersDetail UsersDetail
		{
			get
			{
				return this._UsersDetail.Entity;
			}
			set
			{
				UsersDetail previousValue = this._UsersDetail.Entity;
				if (((previousValue != value) 
							|| (this._UsersDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersDetail.Entity = null;
						previousValue.TRAINERs.Remove(this);
					}
					this._UsersDetail.Entity = value;
					if ((value != null))
					{
						value.TRAINERs.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UsersDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_COURSEs(COURSE entity)
		{
			this.SendPropertyChanging();
			entity.TRAINER = this;
		}
		
		private void detach_COURSEs(COURSE entity)
		{
			this.SendPropertyChanging();
			entity.TRAINER = null;
		}
	}
}
#pragma warning restore 1591
